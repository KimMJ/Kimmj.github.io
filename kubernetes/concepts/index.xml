<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Concepts on Ibiza</title><link>http://kimmj.github.io/kubernetes/concepts/</link><description>Recent content in Concepts on Ibiza</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 30 Jan 2020 18:22:20 +0900</lastBuildDate><atom:link href="http://kimmj.github.io/kubernetes/concepts/index.xml" rel="self" type="application/rss+xml"/><item><title>Controllers Overview</title><link>http://kimmj.github.io/kubernetes/concepts/controllers-overview/</link><pubDate>Thu, 30 Jan 2020 18:26:04 +0900</pubDate><guid>http://kimmj.github.io/kubernetes/concepts/controllers-overview/</guid><description>Contents 이 포스트에서는 Kubernetes의 Controller들에 대해서 알아보도록 하겠습니다. 가장 작은 단위인 Container부터, 상위 개념인 Deployment, StatefulSet까지 다루어 보도록 하겠습니다.
Containers Pods ReplicaSets Deployments StatefulSets Monolithic vs. Microservice 우선 Monolithic과 Microservice에 대해서 짚고 넘어가도록 하겠습니다.
Monolithic의 개념은 하나의 큰 어플리케이션을 말합니다. 여러 사람이 개발을 하고 나서 하나의 큰 패키지로 빌드하고 이를 배포하죠. 간단한 서비스라면 문제가 발생하지는 않겠지만, 점점 코드의 수가 늘어나고 거대해질 수록 문제점이 생깁니다. 예를 들면 빌드시간이 오래걸린다던지, scale-out을 하기 힘들다던지 하는 문제가 있겠네요.</description></item><item><title>Kubernetes Components</title><link>http://kimmj.github.io/kubernetes/concepts/kubernetes-components/</link><pubDate>Tue, 09 Feb 2021 17:29:15 +0900</pubDate><guid>http://kimmj.github.io/kubernetes/concepts/kubernetes-components/</guid><description>각 Components 에 대해 알아보자.
Control Plane Component ETCD partition tolerance(분할 내성)보다 consistency(일관성)에 중점을 둔 db. ETCD 는 간단한 unstructured value를 저장하기에 좋다.
consistency를 중요하게 여기기 때문에 write의 순서를 엄격하게 규정하여 set value 시 atomic한 update를 제공한다.
client는 특정한 key namespace에 대해 subcription을 하여 변화를 감지할 수 있다. 따라서 어떤 component가 ETCD에 write를 할 경우 다른 component는 즉각적으로 그 변화에 대응할 수 있다.
kube-apiserver Kubernetes에서 ETCD와 통신하는 유일한 시스템이다. ETCD로의 접근 시도에 대해 필터링을 한다.</description></item><item><title>Pods</title><link>http://kimmj.github.io/kubernetes/concepts/pods/</link><pubDate>Mon, 03 Feb 2020 14:03:50 +0900</pubDate><guid>http://kimmj.github.io/kubernetes/concepts/pods/</guid><description>Pod Overview Pod의 이해 Pod는 Kubernetes에서 가장 작은 배포 오브젝트이며 쿠버네티스에서 관리하는 최소 관리 단위입니다. Pod는 cluster 안에서 실행중인 어떤 프로세스를 의미합니다. application container, 스토리지 리소스, 유일한 network ip, container가 어떻게 실행할지를 캡슐화한 것입니다.
각각의 Pod는 주어진 application에서 단일 인스턴스를 수행합니다. 즉, 한가지 역할을 맡고 있다고 생각하시면 됩니다.. 따라서 application을 수직확장하고 싶다면 각 인스턴스에 대해 여러 Pod를 생성하면 된다. 그러면 동일한 역할을 하는 Pod가 늘어나니, 병렬적으로 처리가 가능할 것입니다.
Pod는 서비스 중에서 서로 연관성이 높은 프로세스를 지원하기 위해 디자인되었습니다.</description></item></channel></rss>