<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>spinnaker on Ibiza</title><link>http://kimmj.github.io/tags/spinnaker/</link><description>Recent content in spinnaker on Ibiza</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 21 Jan 2020 01:08:00 +0900</lastBuildDate><atom:link href="http://kimmj.github.io/tags/spinnaker/index.xml" rel="self" type="application/rss+xml"/><item><title>Overview</title><link>http://kimmj.github.io/spinnaker/installation/overview/</link><pubDate>Fri, 10 Jan 2020 01:02:39 +0900</pubDate><guid>http://kimmj.github.io/spinnaker/installation/overview/</guid><description>Overview of install Spinnaker 어떻게 Spinnaker를 설치 및 배포하는지 알아보도록 하겠습니다.
가장 먼저 최소 사양을 확인해보도록 하겠습니다.
링크 : https://www.spinnaker.io/guides/developer/getting-set-up/#system-requirements
램 18 GB CPU 4코어 Ubuntu 14.04, 16.04, 18.04 Spinnaker 자체가 클라우드 환경에만 배포가 가능하기 때문에, 아마도 &amp;ldquo;전체 클라우드를 합하여 저정도면 된다&amp;quot;를 의미하는 것 같습니다.
설치 방법은 두가지로 나뉩니다.
테스트를 목적으로 Helm Chart를 통한 설치 실제로 사용할 목적으로 halyard를 통한 설치 저는 여기서 2번 halyard를 통한 설치를 해보려고 합니다.</description></item><item><title>Install Halyard</title><link>http://kimmj.github.io/spinnaker/installation/install-halyard/</link><pubDate>Sat, 11 Jan 2020 01:41:08 +0900</pubDate><guid>http://kimmj.github.io/spinnaker/installation/install-halyard/</guid><description>halyard란? halyard는 Spinnaker를 배포할 때 사용하는 CLI 툴입니다.
halyard는 Spinnaker 관련 설정들의 validation, 배포한 환경 백업, 설정 추가 및 변경에 사용됩니다.
설치 방법 선택하기 총 2가지 방법으로 halyard를 설치할 수 있습니다.
Debian/Ubuntu나 macOS에 직접 설치하기 Docker 사용하기 Spinnaker Docs에서는 실제 Production 환경이라면 직접 설치하는 방법을, 그게 아니라 간단하게 사용하려면 docker를 사용해도 된다고 하고 있습니다.
그리고 한가지의 옵션이 더 있습니다.
인터넷이 되지 않는 환경 (프록시나 방화벽 등으로 halyard를 통한 설치가 어려운 경우) 이 글을 작성하고 있는 환경은 인터넷이 잘 되는 환경입니다.</description></item><item><title>Choose Cloud Providers</title><link>http://kimmj.github.io/spinnaker/installation/choose-cloud-providers/</link><pubDate>Sun, 19 Jan 2020 00:32:21 +0900</pubDate><guid>http://kimmj.github.io/spinnaker/installation/choose-cloud-providers/</guid><description>Spinnaker를 배포할 환경을 설정해 주어야 합니다. 여기에서는 제가 구축한 local kubernetes cluster를 사용할 것입니다.
먼저 2가지가 필요합니다.
kubeconfig 파일 kubeconfig 파일은 일반적으로 ~$HOME/.kube/config 파일을 의미합니다. 저는 local kubernetes cluster로 이동하여 해당 파일을 halyard를 위한 vm으로 복사하였습니다. kubectl CLI 툴 이제 hal config 명령어를 통해 kubernetes cluster를 추가합니다.
hal config provider kubernetes enable CONTEXT=$(kubectl config current-context) hal config provider kubernetes account add wonderland \ --provider-version v2 \ --context $CONTEXT hal config features edit --artifacts true</description></item><item><title>Choose Your Environment</title><link>http://kimmj.github.io/spinnaker/installation/choose-your-environment/</link><pubDate>Sun, 19 Jan 2020 00:42:56 +0900</pubDate><guid>http://kimmj.github.io/spinnaker/installation/choose-your-environment/</guid><description>Spinnaker를 배포하는 방법에는 3가지가 있습니다. Kubernetes 환경에 배포하기, local debian으로 배포하기, local git으로 배포하기가 있습니다.
여기에서는 Kubernetes 환경에 배포하기를 진행할 것입니다.
ACCOUNT=wonderland hal config deploy edit --type distributed --account-name $ACCOUNT 위와같이 설정하면 됩니다. ACCOUNT는 kubernetes cluster를 추가할 때 사용했던 이름을 사용하면 됩니다.</description></item><item><title>Choose a Storage Service</title><link>http://kimmj.github.io/spinnaker/installation/choose-a-storage-service/</link><pubDate>Sun, 19 Jan 2020 00:46:44 +0900</pubDate><guid>http://kimmj.github.io/spinnaker/installation/choose-a-storage-service/</guid><description>Spinnaker들의 데이터를 저장할 공간입니다.
여러가지 옵션들이 있지만, 저는 local로 운용할 수 있는 minio를 통해 데이터를 저장해 볼 것입니다.
minio를 docker-compose를 통해 쉽게 배포하도록 할 것입니다. 먼저, docker-compose를 설치합니다.
sudo curl -L &amp;#34;https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose 그 뒤 minio의 docker-compose.yaml을 만듭니다.
version: '3.7' services: minio: image: minio/minio:RELEASE.2020-01-16T22-40-29Z volumes: - ./data:/data ports: - &amp;quot;9000:9000&amp;quot; environment: MINIO_ACCESS_KEY: minio MINIO_SECRET_KEY: minio123 command: server /data healthcheck: test: [&amp;quot;CMD&amp;quot;, &amp;quot;curl&amp;quot;, &amp;quot;-f&amp;quot;, &amp;quot;http://localhost:9000/minio/health/live&amp;quot;] interval: 30s timeout: 20s retries: 3 docker-compose를 통해서 deamon으로 실행합니다.</description></item><item><title>Deploy and Connect</title><link>http://kimmj.github.io/spinnaker/installation/deploy-and-connect/</link><pubDate>Sun, 19 Jan 2020 01:20:12 +0900</pubDate><guid>http://kimmj.github.io/spinnaker/installation/deploy-and-connect/</guid><description>드디어 마지막 절차입니다.
먼저 어떤 버전을 설치할지 확인후 설정합니다.
hal version list 작성 기준으로 최신 버전이 1.17.6이므로 이를 설정합니다.
hal config version edit --version 1.17.6 halyard를 NodePort로 노출시키기 위해 api와 ui에 base url을 부여합니다.
hal config security ui edit --override-base-url http://192.168.8.22:30100 hal config security api edit --override-base-url http://192.168.8.22:30200 이제 본격적으로 deploy를 하도록 합니다.
hal deploy apply 그 후 Spinnaker를 NodePort로 서비스합니다.
kubectl patch svc spin-deck -n spinnaker --type=&amp;#39;json&amp;#39; -p &amp;#39;[{&amp;#34;op&amp;#34;:&amp;#34;replace&amp;#34;,&amp;#34;path&amp;#34;:&amp;#34;/spec/type&amp;#34;,&amp;#34;value&amp;#34;:&amp;#34;NodePort&amp;#34;}]&amp;#39; kubectl patch svc spin-gate -n spinnaker --type=&amp;#39;json&amp;#39; -p &amp;#39;[{&amp;#34;op&amp;#34;:&amp;#34;replace&amp;#34;,&amp;#34;path&amp;#34;:&amp;#34;/spec/type&amp;#34;,&amp;#34;value&amp;#34;:&amp;#34;NodePort&amp;#34;}]&amp;#39; kubectl patch svc spin-deck -n spinnaker --type=&amp;#39;json&amp;#39; -p &amp;#39;[{&amp;#34;op&amp;#34;:&amp;#34;replace&amp;#34;,&amp;#34;path&amp;#34;:&amp;#34;/spec/ports/0/nodePort&amp;#34;,&amp;#34;value&amp;#34;: 30100}]&amp;#39; kubectl patch svc spin-gate -n spinnaker --type=&amp;#39;json&amp;#39; -p &amp;#39;[{&amp;#34;op&amp;#34;:&amp;#34;replace&amp;#34;,&amp;#34;path&amp;#34;:&amp;#34;/spec/ports/0/nodePort&amp;#34;,&amp;#34;value&amp;#34;: 30200}]&amp;#39; 이제 Spinnaker로 접속하여 확인합니다.</description></item><item><title>Install in Air Gaped Environment</title><link>http://kimmj.github.io/spinnaker/installation/install-in-air-gaped-environment/</link><pubDate>Mon, 20 Jan 2020 01:16:52 +0900</pubDate><guid>http://kimmj.github.io/spinnaker/installation/install-in-air-gaped-environment/</guid><description>이번에는 인터넷이 되지 않는 환경에서 어떻게 Spinnaker를 설치하는지에 대해 알아보도록 하겠습니다.
먼저 halyard에서 언제 인터넷과 통신하는지를 대강 추려보도록 하겠습니다.
Spinnaker의 version.yaml을 불러와서 최신의 halyard 버전과 최신 Spinnaker의 버전들을 보여줍니다. gs://halconfig/version.yml 설치하고자 하는 Spinnaker의 버전을 선택하면, 그에 따른 배포에 필요한 yaml들을 불러옵니다. gs://halconfig/bom/VERSION.yml gs://halconfig/MICRO_SERVICE/TAG.yml deploy를 하기 위해 Google Cloud Repository에서 이미지를 가지고 옵니다. gcr.io/spinnaker-marketplace/SERVICE 마지막으로 dependency가 있는 몇가지 서비스를 Google Cloud Repository에서 가지고옵니다.</description></item><item><title>Canary Analysis</title><link>http://kimmj.github.io/spinnaker/canaryanalysis/canary-analysis/</link><pubDate>Tue, 21 Jan 2020 01:08:00 +0900</pubDate><guid>http://kimmj.github.io/spinnaker/canaryanalysis/canary-analysis/</guid><description>Spinnaker Canary Analysis Spinnaker에는 Canary Analysis라는 자동 분석 도구가 있습니다. Kayenta라는 micro service를 사용하는데, 이를 통해 자동으로 canary deploy가 괜찮은 버전인지를 확인해 줍니다.
그러나 이 툴은 Spinnaker에서 사용하기에 여간 어려운 것이 아닙니다. 제일 먼저 봉착하는 난관은 바로 &amp;ldquo;어떻게 Canary Analysis를 활성화 하는가?&amp;ldquo;입니다.
이곳에 방법이 나와있지만, 사실 저도 엄청 많이 헤멨습니다. 저는 bare-metal 환경에서 Kubernetes cluster를 구축하였었고, aws나 azure, gcp는 사용하지 못하는 상황었습니다. (물론 지금도 집에서 VM으로 로컬에 구성하였지만, cloud platform은 언제나 과금때문에 꺼려지게 됩니다.</description></item><item><title>Pipeline Expressions</title><link>http://kimmj.github.io/spinnaker/tips/pipeline-expressions/</link><pubDate>Fri, 10 Jan 2020 01:33:32 +0900</pubDate><guid>http://kimmj.github.io/spinnaker/tips/pipeline-expressions/</guid><description>Spinnaker는 배포를 자동화할 때 사용합니다. 그렇기 때문에 자동화를 위해선 다른 곳에서 사용된 값들을 가지고 와야할 필요성이 생기기도 합니다.
이 문서에서는 그럴 때 사용할 수 있는 pipeline function에 대해 알아보도록 하겠습니다.
pipeline functions pipeline에서 다른 pipeline의 값들 불러오기 Note: Pipeline expression syntax is based on Spring Expression Language (SpEL).
위의 Note에도 적었듯이, Spinnaker는 SpEL을 기반으로 Expressions를 사용합니다. SpEL에 대해 이미 잘 알고있다면 너무나도 좋겠지만, 저는 익숙하지가 않았기 때문에 많은 시행착오를 거쳐서 습득을 하게 되었습니다.</description></item></channel></rss>