<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ubuntu on Ibiza</title><link>http://kimmj.github.io/tags/ubuntu/</link><description>Recent content in ubuntu on Ibiza</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 06 Dec 2020 17:52:11 +0900</lastBuildDate><atom:link href="http://kimmj.github.io/tags/ubuntu/index.xml" rel="self" type="application/rss+xml"/><item><title>Linux에서 압축파일 분할하기</title><link>http://kimmj.github.io/ubuntu/split-tgz/</link><pubDate>Sun, 06 Dec 2020 17:52:11 +0900</pubDate><guid>http://kimmj.github.io/ubuntu/split-tgz/</guid><description>Linux 환경에서 압축파일을 분할하는 방법에 대해 알아볼 것이다.
Prerequisite tar binary installed split binary installed cat binary installed How to split 다음은 이번에 할 압축분할에 대한 간단한 flow 이다.
graph TD A[Files] --&amp;gt;|Compress with tar| B(tar output) B --&amp;gt; |Split file with split| C(splited files) C --&amp;gt; |Join splitted files with cat| D(single file) D --&amp;gt; |Express with tar| E(Files) Compress with tar 먼저 우리가 알고있는 일반적인 방법으로 압축을 하여 하나의 파일로 만든다.</description></item><item><title>Ubuntu의 Login Message 수정하기</title><link>http://kimmj.github.io/ubuntu/customize-login-message/</link><pubDate>Wed, 11 Mar 2020 14:20:42 +0900</pubDate><guid>http://kimmj.github.io/ubuntu/customize-login-message/</guid><description>TLDR Expand me... This package seeks to make the /etc/motd (Message of the Day) more dynamic and valuable, by providing a simple, clean framework for defining scripts whose output will regularly be written to /etc/motd.
Ubuntu에서는 /etc/update-motd.d 안에 있는 파일들을 확인하여 console, ssh 등 어떤 방법으로든 로그인했을 때 메시지를 띄워줍니다. 여기서 파일들을 사전순으로 로딩하게 됩니다.
따라서 해당 폴더에 적절한 파일들을 생성하게 된다면 로그인 시 출력되는 메시지를 조작할 수 있습니다.</description></item><item><title>reboot 후에 tmux를 실행시켜 원하는 작업을 하기</title><link>http://kimmj.github.io/ubuntu/start-tmux-after-reboot/</link><pubDate>Sat, 29 Feb 2020 14:00:40 +0900</pubDate><guid>http://kimmj.github.io/ubuntu/start-tmux-after-reboot/</guid><description>tmux는 terminal을 한 창에 여러개 띄울 때 사용하는 프로그램입니다.
이 프로그램의 특징은 detach 모드로 들어가면, 어디서든 terminal에 접속하여 해당 session에 접속했을 때, 그 화면 그대로를 가져올 수 있다는 것입니다.
즉, 원격 접속을 통해 서버에 접속했을 때 작업을 돌려놓고 detach모드로 들어가면 나의 session을 꺼도 실제 서버에서는 해당 작업이 계속해서 돌아가고 있다는 것입니다. 퇴근하기 전 시간이 오래걸리는 작업을 돌려놓고 가야할 때 유용하게 사용할 수 있습니다.
저의 경우는 제 로컬 컴퓨터에서 hugo를 통해 사이트를 생성하여 블로그를 편집할 때마다 즉시 그 결과를 보고 있습니다.</description></item><item><title>Ubuntu에서 Base64로 인코딩, 디코딩하기</title><link>http://kimmj.github.io/ubuntu/base64-encode-decode/</link><pubDate>Thu, 27 Feb 2020 20:44:42 +0900</pubDate><guid>http://kimmj.github.io/ubuntu/base64-encode-decode/</guid><description>Encode echo로 입력하기 $ echo &amp;#34;password&amp;#34; | base64 cGFzc3dvcmQK Control+D를 누를때까지 입력하기 $ base64 admin password ^D # Control+D # result YWRtaW4KcGFzc3dvcmQK Decode echo로 입력하기 $ echo &amp;#34;cGFzc3dvcmQK&amp;#34; | base64 --decode password Control+D를 누를때까지 입력하기 $ base64 --decode YWRtaW4KcGFzc3dvcmQK ^D # Control+D # result admin password</description></item><item><title>Editor(vi)가 없을 때 파일 수정하기</title><link>http://kimmj.github.io/ubuntu/file-edit-without-editor/</link><pubDate>Wed, 26 Feb 2020 17:59:29 +0900</pubDate><guid>http://kimmj.github.io/ubuntu/file-edit-without-editor/</guid><description>echo로 파일 내용을 입력하는 방법 &amp;gt;로 파일 덮어쓰기 $ cat file asdfasdfasdf $ echo &amp;#34;asdf&amp;#34; &amp;gt; file $ cat file asdf &amp;gt;&amp;gt;로 파일에 이어쓰기 $ cat file asdf $ echo &amp;#34;asdf&amp;#34; &amp;gt;&amp;gt; file $ cat file asdf asdf cat으로 파일 입력하는 방법 &amp;gt;로 파일 덮어쓰기 $ cat file asdf $ cat &amp;gt; file aaaa bbbb ^D # Command+D $ cat file aaaa bbbb &amp;gt;&amp;gt;로 파일에 이어쓰기 $ cat file asdf $ cat &amp;gt;&amp;gt; file aaaa bbbb ^D # Command+D $ cat file asdf aaaa bbbb &amp;laquo;EOF로 EOF을 입력하면 입력 완료하기 $ cat file asdf $ cat &amp;lt;&amp;lt;EOF &amp;gt; file aaaa bbbb EOF $ cat file asdf aaaa bbbb</description></item><item><title>watch를 사용할 때 alias 이용하기</title><link>http://kimmj.github.io/ubuntu/use-alias-in-watch/</link><pubDate>Sat, 22 Feb 2020 23:33:02 +0900</pubDate><guid>http://kimmj.github.io/ubuntu/use-alias-in-watch/</guid><description>watch는 정해진 시간동안 뒤에 적은 명령어를 실행해주는 프로그램입니다. 가령 kubernetes를 다룰 때 watch kubectl get pods -n kube-system을 통해 kube-system 네임스페이스에 있는 파드들을 지속적으로 모니터링 할 수 있습니다.
그러나 watch는 alias된 명령어를 인식하지 못합니다.
$ ll total 44K drwxrwxr-x 2 wanderlust wanderlust 4.0K 1월 7 20:38 archetypes -rw-rw-r-- 1 wanderlust wanderlust 2.9K 1월 21 23:40 config.toml drwxrwxr-x 16 wanderlust wanderlust 4.0K 2월 22 23:08 content $ watch ll Every 2.0s: ll sh: 1: ll: not found 이 때 해결할 수 있는 가장 편한 방법은 watch 자체를 alias 시켜버리는 것입니다.</description></item><item><title>SSH Tunneling 사용법</title><link>http://kimmj.github.io/ubuntu/ssh-tunneling/</link><pubDate>Thu, 13 Feb 2020 21:16:02 +0900</pubDate><guid>http://kimmj.github.io/ubuntu/ssh-tunneling/</guid><description>-D 옵션으로 socks proxy 사용하기 A라는 서버에서 B라는 서버에 있는 서비스를 보려고 합니다. 이 때, 해당 웹 어플리케이션은 B에서만 연결된 특정 IP로 통신을 하고 있고, 이 때문에 A에서 어플케이션이 제대로 동작하지 않는 상황입니다.
이 때 사용할 수 있는 것이 -D 옵션입니다.
예시
ssh -D 12345 user@server.com 해당 세션이 꺼져있지 않은 상태에서 A 서버에서 웹 브라우저가 localhost:12345를 프록시로 사용하도록 하면 해당 웹 어플리케이션이 제대로 동작합니다.
만약 windows라면 다음과 같이 진행하면 socks proxy를 사용하도록 할 수 있습니다.</description></item><item><title>Tmux</title><link>http://kimmj.github.io/ubuntu/tools/tmux/</link><pubDate>Thu, 23 Jan 2020 21:04:29 +0900</pubDate><guid>http://kimmj.github.io/ubuntu/tools/tmux/</guid><description>tmux란? tmux는 하나의 화면에서 여러개의 터미널을 키고싶을 때 사용하는 프로그램으로, ubuntu를 설치하면 기본적으로 설치되는 프로그램입니다.
다음과 같은 구조를 가집니다.
tmux ├── session │ ├── windows │ │ ├── pane │ │ └── pane │ └── windows │ ├── pane │ └── pane └── session ├── windows │ ├── pane │ └── pane └── windows ├── pane └── pane session 사용법 먼저 가장 큰 단위인 session을 다루는 방법부터 시작해보도록 하겠습니다.
session 생성 tmux 위처럼 tmux를 생성할 수 있습니다.</description></item><item><title>Hostname 변경하기</title><link>http://kimmj.github.io/ubuntu/change-hostname/</link><pubDate>Tue, 14 Jan 2020 01:00:02 +0900</pubDate><guid>http://kimmj.github.io/ubuntu/change-hostname/</guid><description>hostname을 바꾸는 일은 흔치 않지만 최초 셋업할 때 많이 사용하곤 합니다.
# hostnamectl set-hostname &amp;lt;host name&amp;gt; hostnamectl set-hostname wonderland 변경 후 터미널을 끄고 재접속을 하면 변경된 사항을 볼 수 있습니다.
hostname</description></item><item><title>Ubuntu 설치 시 Boot Parameter를 수정하기</title><link>http://kimmj.github.io/ubuntu/how-to-edit-boot-parameter-during-install/</link><pubDate>Wed, 08 Jan 2020 01:52:12 +0900</pubDate><guid>http://kimmj.github.io/ubuntu/how-to-edit-boot-parameter-during-install/</guid><description>Ubuntu 설치할 때 boot parameter가 필요한 상황이 간혹 발생할 수 있습니다.
특히 저의 경우, preseed.cfg를 수정하기 위해 인스톨러가 질의하는 것이 preseed.cfg의 어떤것과 대응이 되는지를 보기 위해 DEBCONF_DEBUG=5라는 옵션을 boot parameter로 주어야 했습니다. 이 때 사용할 수 있는 방법을 소개드립니다.
먼저 평소와 같이 ubuntu를 설치하기 위해 설치 이미지를 삽입합니다. 그 다음에는 언어를 선택하시면, 다음으로 넘어가기 전에 메뉴가 뜹니다.
이 상태에서 F6을 누르시면 옵션을 선택할 수 있고, 이 때 ESC키를 누르면 boot parameter가 하단에 보일 것입니다.</description></item><item><title>sudo를 password 없이 사용하기</title><link>http://kimmj.github.io/ubuntu/how-to-use-sudo-without-password/</link><pubDate>Wed, 08 Jan 2020 01:51:54 +0900</pubDate><guid>http://kimmj.github.io/ubuntu/how-to-use-sudo-without-password/</guid><description>/etc/sudoers는 sudo를 사용할 수 있는 파일입니다. 이 파일을 열어보면 다음과 같은 글이 적혀 있습니다.
Please consider adding local content in /etc/sudoers.d/ instead of directly modifying this file
즉, 직접 이 파일을 수정해서 sudo 권한을 주지 말고, /etc/sudoers.d/ 폴더 내에 파일을 추가하라는 의미입니다.
이 곳에는 /etc/sudoers와 마찬가지로 계정에 대한 설정을 추가할 수 있습니다. 그리고 /etc/sudoers에서는 &amp;ldquo;NOPASSWD&amp;quot;라는 옵션을 주어 password없이 타 계정의 권한을 가지게 만들 수 있습니다.
이 두가지를 종합하여 내 linux 계정이 sudo 명령어를 입력할 때, 즉 root 권한을 가지게 될 때 password를 입력하지 않도록 설정할 수 있습니다.</description></item></channel></rss>