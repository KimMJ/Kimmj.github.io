<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docker on Ibiza</title><link>http://kimmj.github.io/docker/</link><description>Recent content in Docker on Ibiza</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 21 Feb 2020 18:58:35 +0900</lastBuildDate><atom:link href="http://kimmj.github.io/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>http를 사용하는 docker registry를 위한 insecure registry 설정</title><link>http://kimmj.github.io/docker/insecure-registry/</link><pubDate>Sun, 15 Mar 2020 04:18:15 +0900</pubDate><guid>http://kimmj.github.io/docker/insecure-registry/</guid><description>회사같은 곳에서는 보안상의 문제 때문에 Dockerhub에다가 이미지를 올리지 못하는 경우가 많습니다. 이를 위해서 docker에서도 docker registry라는 툴을 제공하는데요, 이는 자신의 local server를 구축하고, dockerhub처럼 이미지를 올릴 수 있는 툴입니다.
이러한 docker registry는 사용자의 환경에 따라 http를 사용하는 경우가 있습니다. 이 때, docker는 default로 https 통신을 하려 하기 때문에 문제가 발생합니다. 이 경우 다음과 같이 조치를 하면 http 통신을 할 수 있습니다.
절차 insecure-registry 설정 /etc/docker/daemon.json 파일을 열어 예시처럼 작성합니다. 없을 경우 생성하면 됩니다.</description></item><item><title>Docker를 sudo없이 실행하기</title><link>http://kimmj.github.io/docker/use-docker-without-sudo/</link><pubDate>Sat, 29 Feb 2020 02:51:19 +0900</pubDate><guid>http://kimmj.github.io/docker/use-docker-without-sudo/</guid><description>docker 명령어는 docker group으로 실행됩니다. 그러나 저희가 기존에 사용하던 일반 user는 해당 group에 속하지 않기 때문에 docker 명령어를 쳤을 때 permission에 관한 에러가 발생하게 됩니다.
이 때 다음과 같이 조치를 하면 sudo 없이 user가 docker 명령어를 사용할 수 있게 됩니다.
sudo usermod -aG docker $USER session을 다시 열고 docker ps 명령어를 입력하여 에러가 발생하는지 확인합니다.
$ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</description></item><item><title>[docker-compose] container에서 다른 container로 접속하기</title><link>http://kimmj.github.io/docker/connect-container-to-container/</link><pubDate>Fri, 21 Feb 2020 18:58:15 +0900</pubDate><guid>http://kimmj.github.io/docker/connect-container-to-container/</guid><description>배경 docker-compose에서는 network bridge를 설정합니다. 이 bridge로 내부 통신을 하게 되죠. 여기서 port-forward를 통해 외부로 서비스를 expose하게 되면 host의 IP와 port의 조합으로 접속할 수 있습니다.
그런데 저는 네트워크 설정의 문제인지, 하나의 container에서 host IP로 접속이 불가능했습니다. 그러면서도 저는 어떻게든 다른 docker-compose의 서비스로 네트워킹이 됐어야 했습니다. 정확히 말하자면 harbor라는 서비스(docker registry)에서 jenkins로 webhook을 날려야 하는 상황이었죠.
먼저 시도했던 것은 jenkins의 ip를 docker inspect jenkins_jenkins_1을 통해 알아내고, 이를 통해 webhook을 전송하는 것이었습니다. 그러나 실패했죠.</description></item></channel></rss>